import os
import sys
import uuid
import time
import yaml
import random
import asyncio
import numpy as np
import json
from typing import List, TypedDict, Dict
from PIL import ImageEnhance, Image

from instagrapi import Client
from instagrapi.types import Usertag, UserShort
from instagrapi.exceptions import LoginRequired
from moviepy.editor import VideoFileClip


class Config(TypedDict):
    username: str
    password: str
    target_usernames: List[str]
    download_folder: str
    check_interval: int


def load_config(
    config_file: str = 'config.yaml'
) -> Config:
    try:
        with open(
            config_file, 'r',
            encoding='utf-8'
        ) as file:
            config: Config = yaml.safe_load(file)
            return config
    except FileNotFoundError:
        raise FileNotFoundError(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª '{config_file}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except yaml.YAMLError as e:
        raise yaml.YAMLError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ YAML-—Ñ–∞–π–ª–∞: {e}")


def load_usernames(
    usernames_file: str = 'usernames.txt'
) -> List[str]:
    usernames = []
    try:
        with open(
            usernames_file, 'r',
            encoding='utf-8'
        ) as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith("#"):
                    usernames.append(line)
        if not len(usernames):
            print("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            sys.exit(1)
        return usernames
    except FileNotFoundError:
        print(f"–§–∞–π–ª {usernames_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        sys.exit(1)


class ReelsCloner:
    def __init__(
        self,
        config: Config
    ):
        self.client = Client()
        self.config = config
        self.session_file = 'session.json'
        self.client.delay_range = [1, 3]
        self.last_processed_videos_file = 'last_processed_videos.json'

    def load_session(
        self,
        client: Client,
        session_file: str = 'session.json'
    ) -> bool:
        if os.path.exists(session_file):
            client.load_settings(session_file)
            print("–°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return True
        print("–§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    def login(
        self,
        cl: Client,
        config: Config,
        session_path: str = 'session.json'
    ) -> bool:
        session = cl.load_settings(session_path)
        login_via_session = False
        login_via_pw = False

        if session:
            try:
                cl.set_settings(session)
                cl.login(config['username'], config['password'])
                print("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                try:
                    cl.get_timeline_feed()
                except LoginRequired:
                    print("–°–µ—Å—Å–∏—è –Ω–µ –≤–∞–ª–∏–¥–Ω–∞—è")
                    old_session = cl.get_settings()

                    cl.set_settings({})
                    cl.set_uuids(old_session["uuids"])

                    cl.login(config['username'], config['password'])
                login_via_session = True
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")

        if not login_via_session:
            try:
                print("–ü—Ä–æ–±—É–µ–º –∑–∞–π—Ç–∏ —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å")
                if cl.login(config['username'], config['password']):
                    login_via_pw = True
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å {e}")

        if not login_via_pw and not login_via_session:
            raise Exception("Couldn't login user with either password or session")

    def load_last_processed_videos(self) -> Dict[str, str]:
        if os.path.exists(self.last_processed_videos_file):
            with open(self.last_processed_videos_file, 'r') as f:
                return json.load(f)
        return {}

    def save_last_processed_video(self, username: str, media_pk: str):
        last_processed_videos = self.load_last_processed_videos()
        last_processed_videos[username] = media_pk
        with open(self.last_processed_videos_file, 'w') as f:
            json.dump(last_processed_videos, f, indent=4)

    def unique_video(self, video_path: str) -> str:
        if not os.path.exists(video_path):
            raise FileNotFoundError(f"–§–∞–π–ª {video_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

        unique_filename = str(uuid.uuid4())
        output_path = os.path.join(self.config['download_folder'], unique_filename)

        clip = VideoFileClip(video_path)

        def adjust_contrast_exposure(frame):
            img = Image.fromarray(frame)
            img = ImageEnhance.Contrast(img).enhance(1.1)
            img = ImageEnhance.Brightness(img).enhance(1.05)
            return np.array(img)

        clip = clip.fl_image(adjust_contrast_exposure)
        clip.write_videofile(output_path, codec='libx264')

        return output_path

    def unique_description(self, description: str) -> str:
        if not description:
            return "üòä"

        description = description.title()

        emojis = ["üòä", "üåü", "üî•", "üéâ", "üí°", "‚ú®", "üöÄ", "üíé"]
        description += f" {random.choice(emojis)}"

        return description

    def download_video(self, media_pk: str, folder: str) -> tuple[str | None, str | None]:
        media_info = self.client.media_info(media_pk)
        if media_info.media_type == 2:
            video_url = media_info.video_url
            video_name = f"{media_pk}"
            video_path = os.path.join(folder, video_name)
            print(video_path)
            self.client.video_download_by_url(video_url, video_path)
            video_path = video_path + ".mp4"
            if os.path.exists(video_path):
                # if os.path.exists(video_path):
                    # os.remove(video_path)
                # os.rename(video_path, video_path)
                return video_path, media_info.caption_text
            else:
                print(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {video_path} –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω!")
                return None, None
        return None, None

    def upload_to_reels(self, video_path: str, caption: str, user_short: UserShort):
        try:
            self.client.clip_upload(
                video_path,
                caption=caption,
                thumbnail=None,
                usertags=[Usertag(user=user_short, x=0.5, y=0.5)],
                location=None,
                extra_data={}
            )
            print(f"–í–∏–¥–µ–æ {video_path} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Instagram Reels!")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: {e}")

    async def post_video(self, video_path: str, original_description: str, target_username: str, latest_media: str):
        print(f"Reels —Å–∫–∞—á–∞–Ω: {video_path}")

        unique_video_path = self.unique_video(video_path)
        print(f"Reels —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {unique_video_path}")

        unique_desc = self.unique_description(original_description)
        print(f"–£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {unique_desc}")

        user_info = self.client.user_info_by_username(self.config['username'])
        user_short = UserShort(
            pk=user_info.pk,
            username=user_info.username,
            full_name=user_info.full_name,
            profile_pic_url=user_info.profile_pic_url
        )

        self.upload_to_reels(unique_video_path, unique_desc, user_short)
        self.save_last_processed_video(target_username, latest_media.pk)

    async def monitor_account(self, target_username: str, interval: int = 300):
        print(f"–ù–∞—á–∏–Ω–∞–µ–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–º {target_username}...")
        last_processed_videos = self.load_last_processed_videos()
        last_processed_video = last_processed_videos.get(target_username)

        while True:
            try:
                user_info_dict = self.client.user_info_by_username_v1(target_username).dict()
                medias = self.client.user_medias(user_info_dict.get("pk"), amount=1)

                if medias:
                    latest_media = medias[0]
                    if latest_media.media_type == 2 and latest_media.pk != last_processed_video:
                        print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π Reels –æ—Ç {target_username}: {latest_media.pk}")
                        last_processed_video = latest_media.pk

                        video_path, original_description = self.download_video(
                            latest_media.pk, self.config['download_folder']
                        )
                        if video_path:
                            self.post_video(video_path, original_description)


            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ {target_username}: {e}")
                retry_delay = random.randint(300, 600)
                print(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_delay // 60} –º–∏–Ω—É—Ç...")
                await asyncio.sleep(retry_delay)
                continue

            await asyncio.sleep(interval)

    def start(self):
        self.load_session(self.client, self.session_file)
        self.login(self.client, self.config, self.session_file)


async def main():
    config = load_config()
    cloner = ReelsCloner(config)
    cloner.start()

    usernames = load_usernames()

    tasks = [cloner.monitor_account(username, config['check_interval']) for username in usernames]
    await asyncio.gather(*tasks)


if __name__ == '__main__':
    asyncio.run(main())
